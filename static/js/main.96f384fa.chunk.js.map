{"version":3,"sources":["logo.svg","components/Header.js","components/Footer.js","components/ListWeather.js","components/SearchWeather.js","components/ViewWeather.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Footer","ListWeather","props","searchResult","data","list","map","weather","key","dt","onClick","handleRowClick","main","src","icon","width","height","alt","newDate","Date","getDay","getMonth","getDate","getFullYear","toString","transformDate","temp","day","toFixed","SearchWeather","handleChange","e","name","target","value","setState","handleSearchClick","state","cityName","this","onChange","type","placeholder","aria-label","aria-describedby","id","React","Component","ViewWeather","selectedWeather","toDateString","humidity","pressure","sunset","toTimeString","sunrise","Main","console","log","filter","JSON","stringify","fetch","then","res","json","result","isLoaded","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.96f384fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n// Stateless or functional component\nfunction Header(){\n    return (\n        <header className=\"bg-dark text-light py-5 text-center\">\n            <h1>\n                Weather So Clear\n            </h1>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\n// Stateless of functional component using arrow notation\nexport const Footer = () => {\n    return (\n    <footer className=\"bg-dark text-light py-5 text-center\">\n        <p>Systrem Consultancy Services SB Copyright &copy; 2020</p>\n    </footer>\n    );\n}","import React from 'react';\n\n// Stateless component\nfunction ListWeather(props) {\n\n    const transformDate = (dt) => {\n        var newDate = new Date(dt * 1000);\n\n        var weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n        var monthname = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n        var formattedDate = weekday[newDate.getDay()] + ' '\n            + monthname[newDate.getMonth()] + ' '\n            + newDate.getDate() + ', ' + newDate.getFullYear()\n        return formattedDate.toString();\n    }\n\n    const handleRowClick = (dt) => {\n        props.handleRowClick(dt);\n    }\n\n    return (\n        <div>\n            <h2>8-day Forecast</h2>\n            <table className=\"table table-bordered table-hover table-striped\">\n                <thead className=\"bg-info\">\n                    <tr>\n                        <th>Weather</th>\n                        <th>Date</th>\n                        <th>Temperature</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        props.searchResult.data.list.map(weather => {\n                            return (\n\n                                <tr key={weather.dt} onClick={() => handleRowClick(weather.dt)}>\n                                    {/* onClick={handleRowClick} will be called upon loading of this component, which we do NOT want to happen!!! */}\n\n                                    <td>{weather.weather[0].main} <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} width=\"40\" height=\"40\" alt=\"\" /></td>\n                                    <td>{transformDate(weather.dt)}</td>\n                                    <td>{(weather.temp.day - 273.15).toFixed(0)} &deg; C</td>\n                                </tr>\n                            );\n                        })\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n\n}\n\nexport default ListWeather;","import React from 'react';\n\n// Stateful component\nclass SearchWeather extends React.Component {\n\n    constructor(props) {\n        super();\n\n        // To create form:\n        // 1) Create states/vars based on the number of inputs u have\n        this.state = {\n            cityName: ''\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"my-5 card py-5 px-5\">\n                <h1>Search Weather</h1>\n                <div className=\"mb-3\">\n\n                    {/* \n                        2) For each input, link it to the state through value attributes \n                        3) Apply onChange method for each input\n                    */}\n                    {/* <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">Exercise Name</label> */}\n                    <div className=\"input-group mb-3\">\n                        <input value={this.state.cityName} name=\"cityName\" onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"Search city\" aria-label=\"Search city\" aria-describedby=\"basic-addon2\" />\n                        <button className=\"btn btn-primary\" id=\"basic-addon2\" onClick={this.handleSearchClick}>Search</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    handleChange = (e) => {\n\n        let name = e.target.name;\n        let value = e.target.value;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSearchClick = () => {\n        this.props.handleSearchClick(this.state.cityName);\n    }\n}\n\nexport default SearchWeather;","import React from 'react';\n\nfunction ViewWeather(props) {\n\n    const transformDate = (dt) => {\n        var newDate = new Date(dt * 1000);\n\n        var weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n        var monthname = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n        var formattedDate = weekday[newDate.getDay()] + ' '\n            + monthname[newDate.getMonth()] + ' '\n            + newDate.getDate() + ', ' + newDate.getFullYear()\n        return formattedDate.toString();\n    }\n\n\n    return (\n        <div className=\"card py-3 px-3 text-center\">\n            <h1>Weather Detail</h1>\n            <p>{props.selectedWeather.temp.day-273.15} &deg; C</p>\n            <p>{new Date(props.selectedWeather.dt).toDateString()}</p>\n            <p>{props.selectedWeather.humidity}</p>\n            <p>{props.selectedWeather.pressure}</p>\n            <p>{(new Date(props.selectedWeather.sunset)).toTimeString()}</p>\n            <p>{(new Date(props.selectedWeather.sunrise)).toTimeString()}</p>\n        </div>\n    )\n}\n\nexport default ViewWeather;","import React from 'react';\nimport ListWeather from './ListWeather';\nimport SearchWeather from './SearchWeather';\nimport ViewWeather from './ViewWeather';\n\n// Stateful component\nclass Main extends React.Component {\n\n    // var workouts = [\n    //     {\n    //         name: \"Fibonacci\",\n    //         difficulty: \"easy\",\n    //         assignee: \"Zainol\"\n    //     }\n    // ];\n\n    constructor() {\n        super();\n        this.state = {\n            searchResult: {\n                error: null,\n                isLoaded: false,\n                data: null\n            },\n            selectedWeather: null\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                \n                <SearchWeather handleSearchClick={this.handleSearchClick} />  \n\n                {/* MUST CHECK IF data IS NOT NULL */}\n                {this.state.searchResult.data ?\n                <ListWeather searchResult={this.state.searchResult} handleRowClick={this.handleRowClick}/>  :\n                <div></div>    \n                }\n\n                {\n                    // If selectedWeather is not set yet, show nothing\n                    this.state.selectedWeather ? \n                        <ViewWeather selectedWeather={this.state.selectedWeather}/> : <div />\n                }\n            </div>\n        )\n    }\n\n    handleRowClick = (dt) => {\n        console.log(\"handleRowClick: dt=\" + dt);\n        let selectedWeather = this.state.searchResult.data.list.filter(weather => {\n            return weather.dt === dt\n        })[0];\n        console.log(\"selectedWeather=\" + JSON.stringify(selectedWeather));\n        this.setState({ // This is done async-ly. So the state is not set immediately.\n            selectedWeather: selectedWeather\n        });\n\n    }\n\n    handleSearchClick = (cityName) => {\n        console.log(\"handleSearchClick: cityName=\"+ cityName);\n\n        fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?q=${cityName}&cnt=8&appid=9a875f3b663d836442770050455b2fbf`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    var searchResult = {...this.state.searchResult};\n                    searchResult.isLoaded = true;\n                    console.log(\"result=\" + JSON.stringify(result));\n                    searchResult.data = result;\n                    this.setState({searchResult});\n                },\n                (error) => {\n                    console.log(error);\n                    var searchResult = {...this.state.searchResult};\n                    searchResult.isLoaded = true;\n                    searchResult.error = error;\n                    this.setState({searchResult});\n                }\n            );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport {Footer} from './components/Footer';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Main/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}